options mlogic mprint symbolgen;
filename data '/home/u49308301/PhD/Lifetime_PD.xlsx';

proc import datafile=data dbms=xlsx out=mydata replace;
	getnames=yes;
RUN;

/* Getting the left and right censored yearly data  and the pd is 12 months ECL as of IFRS 9 */
DATA mydata1;
	SET mydata;
	by cust_id year;

	if last.cust_id=1 or last.year=1 then
		output;
RUN;

%Let inputs = default_flag loan_status  repayment_type loan_term mob remaining_term bureau_score_orig income gdp uer cpi hpi ir gdp_lag uer_lag cpi_lag hpi_lag;
%put &inputs;

proc contents data=mydata1 order=varnum;
run;

DATA mydata2;
	SET mydata1(keep=&inputs);
	retain &inputs;
run;

proc means data=mydata2 n nmiss mean median mode min max;
	var _numeric_;
run;

proc freq data=mydata2;
	table _char_;
run;

proc freq data=mydata2;
	table repayment_type*default_flag;
RUN;

proc univariate data=mydata2 plots;
	var default_flag loan_term mob remaining_term bureau_score_orig income gdp uer 
		cpi hpi ir gdp_lag uer_lag cpi_lag hpi_lag;
run;

/* A combination of Undersampling and Oversampling */
proc freq data=mydata2;
	table default_flag;
run;

data sample;
	set mydata2;
	where default_flag=0;
run;

proc surveyselect data=sample method=srs reps=1 sampsize=4000 out=sampledata;
	id _all_;
run;

/* Oversampling the minority class the default flag = 1 */

%macro default;
	%do i=1 %to 5;
		union all select * from mydata2 where default_flag=1 %end;
%mend;

Proc sql;
	create table mydata3 as select * from sampledata (drop=replicate) %default;
quit;

proc print data=sampledata(obs=20);
run;

/* Splitting our dataset into development and validation datasets */

proc sort data=mydata3 out=mydata3;
	by default_flag;
run;

title1 'Customer Satisfaction Survey';
title2 'Stratified Sampling';

proc surveyselect data=mydata3 method=srs seed=1953 out=SampleStrata 
		samprate=.75 outall;
	strata default_flag;
RUN;

data train test;
	set samplestrata;

	if selected=1 then
		output train;
	else
		output test;
run;

/* Checking the splitting */
proc freq data=SampleStrata;
	table default_flag*selected;
RUN;

DATA train;
	set train;
	drop selectionprob samplingweight selected;
run;

DATA test;
	set test;
	drop selectionprob samplingweight selected;
run;

/* odds ratio */


title1 "Logistic Regression Model for the PD  Data Set";

proc logistic data=work.train plots(only maxpoints=none)=(effect(clband x=(loan_term gdp repayment_type)) oddsratio (type=horizontalstat));
		class  repayment_type (param=ref ref='Repayment') ;
	model default_flag(event='1')= repayment_type loan_term gdp/ lackfit stb clodds=pl ;
	units loan_term=12 / default=1;
	oddsratio 'Comparisons of loan status' default_flag / diff=all cl=pl;
		effectplot slicefit(sliceby=repayment_type x=loan_term) / noobs;
		effectplot slicefit(sliceby=repayment_type x=gdp) / noobs;
		 score data = test out=scored1;
run;

title1;

title1 "Predicted Probabilities from Scored Data Set";
proc print data=work.scored1(obs=10);
   var p_1 default_flag repayment_type loan_term gdp;
  RUN;
title1 "Mean of the predicted probabilites from the PD data set";

proc means data = scored1 mean nolabels;
var p_1;
run;

proc means data = train mean nolabels;
var default_flag;
run;

/* ===
/* ===================================================== */
/* 
   Demonstration: Scoring New Cases                               
                */
/* ===================================================== */

/* Score a new data set with one run of the LOGISTIC procedure with the 
   SCORE statement.  */
 
proc logistic data=work.train noprint;
   class res (param=ref ref='S');
   model ins(event='1')= res dda ddabal dep depamt cashbk checks;
   score data = pmlr.new out=work.scored1;
run;

title1 "Predicted Probabilities from Scored Data Set";
proc print data=work.scored1(obs=10);
   var p_1 dda ddabal dep depamt cashbk checks res;
run;

title1 "Mean of Predicted Probabilities from Scored Data Set";
proc means data=work.scored1 mean nolabels;
   var p_1;
run;

/* Score a new data set with the OUTMODEL= amd INMODEL= options */ 

proc logistic data=work.train outmodel=work.scoredata noprint;
   class res (param=ref ref='S');
   model ins(event='1')= res dda ddabal dep depamt cashbk checks;
run;

proc logistic inmodel=work.scoredata noprint;
   score data = pmlr.new out=work.scored2;
run;

title1 "Predicted Probabilities from Scored Data Set";
proc print data=work.scored2(obs=10);
   var p_1 dda ddabal dep depamt cashbk checks res;
run;

/* Score a new data set with the CODE Statement  */

proc logistic data=work.train noprint;
   class res (param=ref ref='S');
   model ins(event='1')= res dda ddabal dep depamt cashbk checks;
   code file="/home/u49308301/EPMLR51/pmlr_score.txt";
run;

data work.scored3;
   set pmlr.new;
   %include "/home/u49308301/EPMLR51/pmlr_score.txt";
run;

title1 "Predicted Probabilities from Scored Data Set";
proc print data=work.scored3(obs=10);
   var p_ins1 dda ddabal dep depamt cashbk checks res;
run;
title1 ;



/* ===================================================== */
/*
Scoring New Cases
/* ===================================================== */
data work.scored3;
	set work.test;
	%include "/home/u49308301/EPMLR51/pmlr_score.txt";
run;

title1 "Predicted Probabilities from Scored Data Set";

proc print data=work.scored3(obs=10);
	var p_default_flag loan_status repayment_type loan_term;
run;

title1;

/* Calculating Information Number and Weight of Evidence for all variables */
/* Creating an empty table for the Information summary */
proc sql;
	create table IV_summary
  (Variable char(30), IV num);
	run;
quit;

proc contents data=train out=cols noprint;
run;

proc sql noprint;
	select name into :name separated by " " from cols where upcase(name) 
		^=%upcase("default_flag");
quit;

%put &=name;

/* creating a macro for default rate aggregates and the calculation of the weight of evidence  */

%LET error = 1e-12;
%put &error;

%macro bivariate(var);
	proc sql noprint;
		create table &var as select &var , sum(Default_Flag) as default, count (*)as 
			total, sum(Default_Flag)/count (*) as default_rate from train group by &var;
		select sum(Default), sum(Total) into: default_total , :grand_total from &var;
		run;
		create table &var as select *, log(per_good/(per_bad+&error)) as woe , 
			(per_good - per_bad)*log(per_good/(per_bad+&error)) as IV from 
(select  &var , default, Total , default / &default_total as per_bad , 
			(total-default) /(&grand_total - &default_total+&error) as per_good 
			from &var);
	Quit;

	data &var;
		set &var end=eof;
		iv_sum  + iv;

		if eof=1 then
			call symputx("sum", iv_sum);
	run;

	%put &=sum;

	/* Creating the information number summary table */
	proc sql;
		insert into IV_summary values ("&var", &sum);
	quit;

	ods excel options (sheet_interval="table" embedded_titles='yes' 
		embedded_titles_onces='yes');
	title "&var";

	proc print data=&var;
	run;

	title;
%mend bivariate();

ods excel file='/home/u49308301/PhD/IV.xlsx';

%macro runs();
	%let i = 1;

	%do %while(%scan(&name, &i) ne);
		%let myvar = %scan(&name, &i);
		%bivariate (&myvar);
		%let i = %eval(&i + 1);
	%end;
%mend runs;

%runs;
ods noproctitles;

proc print data=IV_summary;
run;

ods excel close;

/* dropping the WOE tables */
%macro mydel();
	%let i = 1;

	%do %while(%scan(&name, &i) ne);
		%let myvar = %scan(&name, &i);

		proc sql;
			drop table &myvar;
		quit;

		%let i = %eval(&i + 1);
	%end;
%mend mydel;

%mydel;

/* Coarse classing   */
data train1;
	set train;

	if cpi <=1.5 then
		cpi_band=1;
	else if cpi <=3 then
		cpi_band=2;
	else if cpi <=4.5 then
		cpi_band=3;
	else
		cpi_band=4;

	if cpi_lag <=1.5 then
		cpi_lag_band=1;
	else if cpi_lag <=3 then
		cpi_lag_band=2;
	else if cpi_lag <=4.5 then
		cpi_lag_band=3;
	else
		cpi_lag_band=4;

	if bureau_score_orig <=450 then
		bureau_band=1;
	else if bureau_score_orig <=550 then
		bureau_band=2;
	else
		bureau_band=3;

	if gdp <=-3 then
		gdp_band=1;
	else if gdp <=0 then
		gdp_band=2;
	else if gdp <=3 then
		gdp_band=3;
	else
		gdp_band=4;

	if gdp_lag <=-3 then
		gdp_lag_band=1;
	else if gdp_lag <=0 then
		gdp_lag_band=2;
	else if gdp_lag <=3 then
		gdp_lag_band=3;
	else
		gdp_lag_band=4;

	if hpi <=-6 then
		hpi_band=1;
	else if hpi <=0 then
		hpi_band=2;
	else if hpi <=6 then
		hpi_band=3;
	else
		hpi_band=4;

	if hpi_lag <=-6 then
		hpi_lag_band=1;
	else if hpi_lag <=0 then
		hpi_lag_band=2;
	else if hpi_lag <=6 then
		hpi_lag_band=3;
	else
		hpi_lag_band=4;

	if income <=-.5 then
		income_band=1;
	else if income <=0 then
		income_band=2;
	else if income <=.5 then
		income_band=3;
	else
		income_band=4;

	if ir <=2 then
		ir_band=1;
	else if ir <=3 then
		ir_band=2;
	else if ir <=4 then
		ir_band=3;
	else
		ir_band=4;

	if loan_term <=100 then
		loan_term_band=1;
	else if loan_term <=200 then
		loan_term_band=2;
	else if loan_term <=300 then
		loan_term_band=3;
	else
		loan_term_band=4;

	if mob <=70 then
		mob_band=1;
	else if mob <=100 then
		mob_band=2;
	else if mob <=220 then
		mob_band=3;
	else
		mob_band=4;

	if remaining_term <=70 then
		remaining_term_band=1;
	else if remaining_term <=150 then
		remaining_term_band=2;
	else if remaining_term <=320 then
		remaining_term_band=3;
	else
		remaining_term_band=4;

	if uer <=5 then
		uer_band=1;
	else if uer <=6 then
		uer_band=2;
	else if uer <=7 then
		uer_band=3;
	else
		uer_band=4;

	if uer_lag <=5 then
		uer_lag_band=1;
	else if uer_lag <=6 then
		uer_lag_band=2;
	else if uer_lag <=7 then
		uer_lag_band=3;
	else
		uer_lag_band=4;
	drop bureau_score_orig cpi cpi_lag gdp gdp_lag hpi hpi_lag income ir loan_term 
		mob remaining_term repayment_type uer uer_lag;
run;

proc contents data=train1 out=col;
run;

/* Calculating Information Number and Weight of Evidence for all variables */
/* Creating an empty table for the Information summary */
proc sql;
	create table IV_summary
  (Variable char(30), IV num);
	run;
quit;

proc contents data=train out=cols noprint;
run;

proc sql noprint;
	select name into :name separated by " " from cols where upcase(name) 
		^=%upcase("default_flag");
quit;

%put &=name;

/* creating a macro for default rate aggregates and the calculation of the weight of evidence  */

%LET error = 1e-12;
%put &error;

%macro bivariate(var);
	proc sql noprint;
		create table &var as select &var , sum(Default_Flag) as default, count (*)as 
			total, sum(Default_Flag)/count (*) as default_rate from train1 group by &var;
		select sum(Default), sum(Total) into: default_total , :grand_total from &var;
		run;
		create table &var as select *, log(per_good/(per_bad+&error)) as woe , 
			(per_good - per_bad)*log(per_good/(per_bad+&error)) as IV from 
(select  &var , default, Total , default / &default_total as per_bad , 
			(total-default) /(&grand_total - &default_total+&error) as per_good 
			from &var);
	Quit;

	data &var;
		set &var end=eof;
		iv_sum  + iv;

		if eof=1 then
			call symputx("sum", iv_sum);
	run;

	%put &=sum;

	/* Creating the information number summary table */
	proc sql;
		insert into IV_summary values ("&var", &sum);
	quit;

	ods excel options (sheet_interval="table" embedded_titles='yes' 
		embedded_titles_onces='yes');
	title "&var";

	proc print data=&var;
	run;

	title;
%mend bivariate();

%let inputs = bureau_band cpi_band cpi_lag_band gdp_band gdp_lag_band hpi_band hpi_lag_band income_band ir_band loan_term_band mob_band remaining_term_band uer_band uer_lag_band;
ods excel file='/home/u49308301/PhD/IV_band.xlsx';

%macro runs();
	%let i = 1;

	%do %while(%scan(&inputs, &i) ne);
		%let inp = %scan(&inputs, &i);
		%bivariate (&inp);
		%let i = %eval(&i + 1);
	%end;
%mend runs;

%runs;
ods noproctitles;

proc print data=IV_summary;
run;

ods excel close;

/* Creating WOE variable  */
data train2;
	set train1;

	if bureau_band=1 then
		bureau_band_woe=0.52634;
	else if bureau_band=2 then
		bureau_band_woe=0.732153;
	else
		bureau_band_woe=1.257207;

	if cpi_band=1 then
		cpi_band_woe=0.007475;
	else if cpi_band=2 then
		cpi_band_woe=0.015636;
	else if cpi_band=3 then
		cpi_band_woe=0.035004;
	else
		cpi_band_woe=0.050416;

	if cpi_lag_band=1 then
		cpi_lag_band_woe=0.049433;
	else if cpi_lag_band=2 then
		cpi_lag_band_woe=0.068931;
	else if cpi_lag_band=3 then
		cpi_lag_band_woe=0.06965;
	else
		cpi_lag_band_woe=0.069798;

	if gdp_band=1 then
		gdp_band_woe=0.150774;
	else if gdp_band=2 then
		gdp_band_woe=0.206133;
	else if gdp_band=3 then
		gdp_band_woe=0.25373;
	else
		gdp_band_woe=0.269577;

	if gdp_lag_band=1 then
		gdp_lag_band_woe=0.00105;
	else if gdp_lag_band=2 then
		gdp_lag_band_woe=0.003755;
	else if gdp_lag_band=3 then
		gdp_lag_band_woe=0.003767;
	else
		gdp_lag_band_woe=0.003883;

	if hpi_band=1 then
		hpi_band_woe=0.224709;
	else if hpi_band=2 then
		hpi_band_woe=0.225602;
	else if hpi_band=3 then
		hpi_band_woe=0.228048;
	else
		hpi_band_woe=0.298897;

	if hpi_lag_band=1 then
		hpi_lag_band_woe=0.000777;
	else if hpi_lag_band=2 then
		hpi_lag_band_woe=0.001476;
	else if hpi_lag_band=3 then
		hpi_lag_band_woe=0.002321;
	else
		hpi_lag_band_woe=0.002528;

	if income_band=1 then
		income_band_woe=0.001098;
	else if income_band=2 then
		income_band_woe=0.001449;
	else if income_band=3 then
		income_band_woe=0.033697;
	else
		income_band_woe=0.044809;

	if ir_band=1 then
		ir_band_woe=0.000758;
	else if ir_band=2 then
		ir_band_woe=0.001889;
	else if ir_band=3 then
		ir_band_woe=0.012507;
	else
		ir_band_woe=0.013688;

	if loan_term_band=1 then
		loan_term_band_woe=0.080659;
	else if loan_term_band=2 then
		loan_term_band_woe=0.080735;
	else if loan_term_band=3 then
		loan_term_band_woe=0.08981;
	else
		loan_term_band_woe=0.119366;

	if mob_band=1 then
		mob_band_woe=0.00253;
	else if mob_band=2 then
		mob_band_woe=0.007594;
	else if mob_band=3 then
		mob_band_woe=0.008544;
	else
		mob_band_woe=0.013002;

	if remaining_term_band=1 then
		remaining_term_band_woe=0.071665;
	else if remaining_term_band=2 then
		remaining_term_band_woe=0.106347;
	else if remaining_term_band=3 then
		remaining_term_band_woe=0.107785;
	else
		remaining_term_band_woe=0.131812;

	if uer_band=1 then
		uer_band_woe=0.04727;
	else if uer_band=2 then
		uer_band_woe=0.052054;
	else if uer_band=3 then
		uer_band_woe=0.145755;
	else
		uer_band_woe=0.146266;

	if uer_lag_band=1 then
		uer_lag_band_woe=0.103223;
	else if uer_lag_band=2 then
		uer_lag_band_woe=0.144062;
	else if uer_lag_band=3 then
		uer_lag_band_woe=0.146976;
	else
		uer_lag_band_woe=0.154988;
	drop &inputs;
run;

proc contents data=train2;
run;

/* Multicollinearity check variance inflation factor  */
proc reg data=train2;
	model Default_Flag=bureau_band_woe cpi_band_woe cpi_lag_band_woe gdp_band_woe 
		gdp_lag_band_woe hpi_band_woe hpi_lag_band_woe income_band_woe ir_band_woe 
		loan_term_band_woe mob_band_woe remaining_term_band_woe uer_band_woe 
		uer_lag_band_woe /vif;
	run;
	ods select none;
	ods output clusterquality=work.summary rsquared=work.clusters;

proc varclus data=train2 hi maxeigen=0.70;
	var bureau_band_woe cpi_band_woe cpi_lag_band_woe gdp_band_woe 
		gdp_lag_band_woe hpi_band_woe hpi_lag_band_woe income_band_woe ir_band_woe 
		loan_term_band_woe mob_band_woe remaining_term_band_woe uer_band_woe 
		uer_lag_band_woe;
run;

ods select all;

proc print data=work.clusters noobs label split="*";
	where NumberOfClusters=7;
	var Cluster Variable RSquareRatio;
	label RSquareRatio="1 - RSquare*Ratio";
run;

/* ==========================================================================================================

Practice: Performing Variable Screening
No variable is removed since there are no varibales with a low rank of both spearmann rank and hoeffding D
/* =========================================================================================================== */

%let ex_reduced= bureau_band_woe cpi_band_woe cpi_lag_band_woe gdp_band_woe gdp_lag_band_woe  hpi_band_woe 
 hpi_lag_band_woe income_band_woe ir_band_woe loan_term_band_woe mob_band_woe remaining_term_band_woe uer_band_woe uer_lag_band_woe;
ods select none;
ods output spearmancorr=work.spearman hoeffdingcorr=work.hoeffding;

proc corr data=train2 spearman hoeffding;
	var default_flag;
	with &ex_reduced;
run;

ods select all;

proc sort data=work.spearman;
	by variable;
run;

proc sort data=work.hoeffding;
	by variable;
run;

data work.correlations;
	attrib variable length=$32;
	merge work.spearman(rename=(default_flag=scorr pdefault_flag=spvalue)) 
		work.hoeffding
         (rename=(default_flag=hcorr pdefault_flag=hpvalue));
	by variable;
	scorr_abs=abs(scorr);
	hcorr_abs=abs(hcorr);
run;

proc rank data=work.correlations out=work.correlations1 descending;
	var scorr_abs hcorr_abs;
	ranks ranksp rankho;
run;

proc sort data=work.correlations1;
	by ranksp;
run;

title1 "Rank of Spearman Correlations and Hoeffding Correlations";

proc print data=work.correlations1 label split='*';
	var variable ranksp rankho scorr spvalue hcorr hpvalue;
	label ranksp='Spearman rank*of variables' scorr='Spearman Correlation' 
		spvalue='Spearman p-value' rankho='Hoeffding rank*of variables' 
		hcorr='Hoeffding Correlation' hpvalue='Hoeffding p-value';
run;

%global vref href;

proc sql noprint;
	select min(ranksp) into :vref from (select ranksp from work.correlations1 
		having spvalue > .5);
	select min(rankho) into :href from (select rankho from work.correlations1 
		having hpvalue > .5);
quit;

title1 "Scatter Plot of the Ranks of Spearman vs. Hoeffding";

proc sgplot data=work.correlations1;
	refline &vref / axis=y;
	refline &href / axis=x;
	scatter y=ranksp x=rankho / datalabel=variable;
	yaxis label="Rank of Spearman";
	xaxis label="Rank of Hoeffding";
run;

/* ===================================================== */
/* Practice: Creating Empirical Logit Plots              */
/* ===================================================== */

%global var;
%let var=	gdp_band_woe;

proc rank data=train2 groups=10 out=work.ranks;
	var &var;
	ranks bin;
run;

ods select all;

proc print data=ranks (obs=10);
	var &var bin;
run;

proc means data=work.ranks noprint nway;
	class bin;
	var default_flag &var;
	output out=work.bins sum(default_flag)=default_flag mean(&var)=&var;
run;

data work.bins;
	set work.bins;
	elogit=log((default_flag+(sqrt(_FREQ_)/2))/ 
		(_FREQ_ -default_flag+(sqrt(_FREQ_)/2)));
run;

title1 "Empirical Logit against &var";

proc sgplot data=work.bins;
	reg y=elogit x=&var / curvelabel="Linear Relationship?" curvelabelloc=outside 
		lineattrs=(color=ligr);
	series y=elogit x=&var;
run;

title1;
title1 "Empirical Logit against Binned &var";

proc sgplot data=work.bins;
	reg y=elogit x=bin / curvelabel="Linear Relationship?" curvelabelloc=outside 
		lineattrs=(color=ligr);
	series y=elogit x=bin;
run;

title1;

/* Switch the binned DDABal (B_DDABal) for the originally scaled
DDABal input in the list of potential inputs. */
%global screened;
%let screened= bureau_band_woe cpi_band_woe cpi_lag_band_woe gdp_band_woe gdp_lag_band_woe  hpi_band_woe 
 hpi_lag_band_woe income_band_woe ir_band_woe loan_term_band_woe mob_band_woe remaining_term_band_woe uer_band_woe uer_lag_band_woe;

/* ===================================================== */
/*
Demonstration: Detecting Interactions

/* ===================================================== */
title1 "P-Value for Entry and Retention";
%global sl;

proc sql;
	select 1-probchi(log(sum(default_flag ge 0)), 1) into :sl from work.train2;
quit;

title1 "Interaction Detection using Forward Selection";

proc logistic data=work.train2;
	model default_flag(event='1')=&screened bureau_band_woe|cpi_band_woe|cpi_lag_band_woe|gdp_band_woe|gdp_lag_band_woe|hpi_band_woe|hpi_lag_band_woe
|income_band_woe|ir_band_woe|loan_term_band_woe|mob_band_woe|remaining_term_band_woe|uer_band_woe|uer_lag_band_woe @2 
		/ include=28 clodds=pl selection=forward slentry=&sl;
run;

/* ========================================================================================================================================

Demonstration: Using Backward Elimination to Subset the  Variables

/* ========================================================================================================================================== */
title1 "Backward Selection for Variable Annuity Data Set";

proc logistic data=work.train2;
	model default_flag(event='1')=&screened gdp_lag_band_woe*hpi_band_woe 
		gdp_band_woe*uer_band_woe gdp_lag_band_woe*uer_band_woe 
		gdp_band_woe*income_band_woe gdp_band_woe*ir_band_woe 
		gdp_lag_band_woe*ir_band_woe uer_band_woe*uer_lag_band_woe / clodds=pl 
		selection=backward slstay=&sl hier=single fast;
run;

%let input = bureau_band_woe cpi_band_woe cpi_lag_band_woe 
		gdp_band_woe gdp_lag_band_woe hpi_band_woe income_band_woe ir_band_woe 
		remaining_term_band_woe uer_band_woe uer_lag_band_woe 
		gdp_band_woe*ir_band_woe gdp_lag_band_woe*ir_band_woe 
		uer_band_woe*uer_lag_band_woe;

/* =====================================================
Demonstration: Displaying Odds Ratios for Variables

/* ===================================================== */
title1 "Candidate Model for Variable Annuity Data Set";
ods select all;

proc logistic data=work.train2;
	model default_flag(event='1')=&input;
run;

/* =====================================================

Demonstration: Using the Best-Subsets Selection Method

/* ===================================================== */
/* Run best subsets */
title1 "Models Selected by Best Subsets Selection";

proc logistic data=work.TRAIN2;
	model default_flag(event='1')=&input / selection=score best=1;
run;

/* =====================================================

Demonstration: Using Fit Statistics to Select a Model

/* ===================================================== */
/* The fitstat macro generates model fit statistics for the
models selected in the all subsets selection. The macro
variable IM is set equal to the variable names in the
model_indx model while the macro variable IC is set
equal to the number of variables in the model_indx model. */
%macro fitstat(data=, target=, event=, inputs=, best=, priorevent=);
	ods select none;
	ods output bestsubsets=work.score;

	proc logistic data=&data namelen=50;
		model &target(event="&event")=&inputs / selection=score best=&best;
	run;

	/* The names and number of variables are transferred to macro
	variables using PROC SQL. */
	proc sql noprint;
		select variablesinmodel into :inputs1 -  
  from work.score;
		select NumberOfVariables into :ic1 - 
  from work.score;
	quit;

	%let lastindx=&SQLOBS;

	%do model_indx=1 %to &lastindx;
		%let im=&&inputs&model_indx;
		%let ic=&&ic&model_indx;
		ods output scorefitstat=work.stat&ic;

		proc logistic data=&data namelen=50;
			model &target(event="&event")=&im;
			score data=&data out=work.scored fitstat priorevent=&priorevent;
		run;

		proc datasets library=work nodetails nolist;
			delete scored;
			run;
		quit;

	%end;

	/* The data sets with the model fit statistics are
	concatenated and sorted by BIC. */
	data work.modelfit;
		set work.stat1 - work.stat&lastindx;
		model=_n_;
	run;

%mend fitstat;

%fitstat(data=train2, target=default_flag, event=1, inputs=&input, best=1, 
	priorevent=0.02);

proc sort data=work.modelfit;
	by bic;
run;

title1 "Fit Statistics from Models selected from Best-Subsets";
ods select all;

proc print data=work.modelfit;
	var model auc aic bic misclass adjrsquare brierscore;
run;

%global selected;

proc sql;
	select VariablesInModel into :selected from work.score where 
		numberofvariables=13;
quit;

/* Hosmer Lemeshow Goodness - of - fit test */
/* logistic regression model fits the data well. */
proc logistic data=train2 descending;
	model Default_Flag (event="1")=&selected /lackfit rsq;
	output out=train3 p=p_hat;
run;

/*
log(p/1-p) = 2.2741 +  -21.2035 * remaining_term_band_ +  36.5747 * loan_term_band_woe +  -60.7317 * ir_band_woe
+  509.8 * hpi_lag_band_woe +  -280.9 * gdp_lag_band_woe +  -15.9987 * gdp_band_woe +  -4.1325 * bureau_band_woe
*/
proc freq data=mydata1;
	table default_flag;
run;

/* Creating Data for KS and Gini Coefficient (discriminatory test)  */
data train3;
	set train3;
run;

proc sort data=train3;
	by descending p_hat;
run;

ods excel file='/home/u49308301/PhD/probability.xlsx';

proc print data=train3;
run;

ods excel close;

/* divide data into 10 equal observation bins */
proc sql;
	create table train3 as select * from train3;
quit;

ods excel file='/home/u49308301/PhD/validate.xlsx';
%let Noofrecs = &sqlobs;
%let Noofbins = 10;

data pred_default;
	set train3;
	count=1;
	cumm_count +count;
	bin=round(cumm_count/(&Noofrecs/&Noofbins)-0.5)+1;

	if bin GT &Noofbins then
		Bin=&Noofbins;
run;

proc sql;
	create table gains_dev as select bin, count(*) as freq, sum(Default_Flag) as 
		default, mean(p_hat)as exp_bad from pred_default group by bin;
	run;

proc print data=gains_dev;
run;

ods excel close;

/* Clustering  */
data train4;
	set train3;
	score=Round(p_hat*1000);
RUN;

ods html file='/home/u49308301/UDEMY/ods4.xls';

proc freq data=train4;
	tables score;
RUN;

ODS HTML CLOSE;

/* Validation   */
/* Validation sample scoring */
proc means data=test n nmiss max min median mean p1 p5 p95 p99;
run;

data test1;
	set test;

	if cpi <=1.5 then
		cpi_band=1;
	else if cpi <=3 then
		cpi_band=2;
	else if cpi <=4.5 then
		cpi_band=3;
	else
		cpi_band=4;

	if cpi_lag <=1.5 then
		cpi_lag_band=1;
	else if cpi_lag <=3 then
		cpi_lag_band=2;
	else if cpi_lag <=4.5 then
		cpi_lag_band=3;
	else
		cpi_lag_band=4;

	if bureau_score_orig <=450 then
		bureau_band=1;
	else if bureau_score_orig <=550 then
		bureau_band=2;
	else
		bureau_band=3;

	if gdp <=-3 then
		gdp_band=1;
	else if gdp <=0 then
		gdp_band=2;
	else if gdp <=3 then
		gdp_band=3;
	else
		gdp_band=4;

	if gdp_lag <=-3 then
		gdp_lag_band=1;
	else if gdp_lag <=0 then
		gdp_lag_band=2;
	else if gdp_lag <=3 then
		gdp_lag_band=3;
	else
		gdp_lag_band=4;

	if hpi <=-6 then
		hpi_band=1;
	else if hpi <=0 then
		hpi_band=2;
	else if hpi <=6 then
		hpi_band=3;
	else
		hpi_band=4;

	if hpi_lag <=-6 then
		hpi_lag_band=1;
	else if hpi_lag <=0 then
		hpi_lag_band=2;
	else if hpi_lag <=6 then
		hpi_lag_band=3;
	else
		hpi_lag_band=4;

	if income <=-.5 then
		income_band=1;
	else if income <=0 then
		income_band=2;
	else if income <=.5 then
		income_band=3;
	else
		income_band=4;

	if ir <=2 then
		ir_band=1;
	else if ir <=3 then
		ir_band=2;
	else if ir <=4 then
		ir_band=3;
	else
		ir_band=4;

	if loan_term <=100 then
		loan_term_band=1;
	else if loan_term <=200 then
		loan_term_band=2;
	else if loan_term <=300 then
		loan_term_band=3;
	else
		loan_term_band=4;

	if mob <=70 then
		mob_band=1;
	else if mob <=100 then
		mob_band=2;
	else if mob <=220 then
		mob_band=3;
	else
		mob_band=4;

	if remaining_term <=70 then
		remaining_term_band=1;
	else if remaining_term <=150 then
		remaining_term_band=2;
	else if remaining_term <=320 then
		remaining_term_band=3;
	else
		remaining_term_band=4;

	if uer <=5 then
		uer_band=1;
	else if uer <=6 then
		uer_band=2;
	else if uer <=7 then
		uer_band=3;
	else
		uer_band=4;

	if uer_lag <=5 then
		uer_lag_band=1;
	else if uer_lag <=6 then
		uer_lag_band=2;
	else if uer_lag <=7 then
		uer_lag_band=3;
	else
		uer_lag_band=4;
	drop bureau_score_orig cpi cpi_lag gdp gdp_lag hpi hpi_lag income ir loan_term 
		mob remaining_term repayment_type uer uer_lag;
run;

/* Creating woe variables for validation sample  */
data test2;
	set test1;

	if bureau_band=1 then
		bureau_band_woe=0.52634;
	else if bureau_band=2 then
		bureau_band_woe=0.732153;
	else
		bureau_band_woe=1.257207;

	if cpi_band=1 then
		cpi_band_woe=0.007475;
	else if cpi_band=2 then
		cpi_band_woe=0.015636;
	else if cpi_band=3 then
		cpi_band_woe=0.035004;
	else
		cpi_band_woe=0.050416;

	if cpi_lag_band=1 then
		cpi_lag_band_woe=0.049433;
	else if cpi_lag_band=2 then
		cpi_lag_band_woe=0.068931;
	else if cpi_lag_band=3 then
		cpi_lag_band_woe=0.06965;
	else
		cpi_lag_band_woe=0.069798;

	if gdp_band=1 then
		gdp_band_woe=0.150774;
	else if gdp_band=2 then
		gdp_band_woe=0.206133;
	else if gdp_band=3 then
		gdp_band_woe=0.25373;
	else
		gdp_band_woe=0.269577;

	if gdp_lag_band=1 then
		gdp_lag_band_woe=0.00105;
	else if gdp_lag_band=2 then
		gdp_lag_band_woe=0.003755;
	else if gdp_lag_band=3 then
		gdp_lag_band_woe=0.003767;
	else
		gdp_lag_band_woe=0.003883;

	if hpi_band=1 then
		hpi_band_woe=0.224709;
	else if hpi_band=2 then
		hpi_band_woe=0.225602;
	else if hpi_band=3 then
		hpi_band_woe=0.228048;
	else
		hpi_band_woe=0.298897;

	if hpi_lag_band=1 then
		hpi_lag_band_woe=0.000777;
	else if hpi_lag_band=2 then
		hpi_lag_band_woe=0.001476;
	else if hpi_lag_band=3 then
		hpi_lag_band_woe=0.002321;
	else
		hpi_lag_band_woe=0.002528;

	if income_band=1 then
		income_band_woe=0.001098;
	else if income_band=2 then
		income_band_woe=0.001449;
	else if income_band=3 then
		income_band_woe=0.033697;
	else
		income_band_woe=0.044809;

	if ir_band=1 then
		ir_band_woe=0.000758;
	else if ir_band=2 then
		ir_band_woe=0.001889;
	else if ir_band=3 then
		ir_band_woe=0.012507;
	else
		ir_band_woe=0.013688;

	if loan_term_band=1 then
		loan_term_band_woe=0.080659;
	else if loan_term_band=2 then
		loan_term_band_woe=0.080735;
	else if loan_term_band=3 then
		loan_term_band_woe=0.08981;
	else
		loan_term_band_woe=0.119366;

	if mob_band=1 then
		mob_band_woe=0.00253;
	else if mob_band=2 then
		mob_band_woe=0.007594;
	else if mob_band=3 then
		mob_band_woe=0.008544;
	else
		mob_band_woe=0.013002;

	if remaining_term_band=1 then
		remaining_term_band_woe=0.071665;
	else if remaining_term_band=2 then
		remaining_term_band_woe=0.106347;
	else if remaining_term_band=3 then
		remaining_term_band_woe=0.107785;
	else
		remaining_term_band_woe=0.131812;

	if uer_band=1 then
		uer_band_woe=0.04727;
	else if uer_band=2 then
		uer_band_woe=0.052054;
	else if uer_band=3 then
		uer_band_woe=0.145755;
	else
		uer_band_woe=0.146266;

	if uer_lag_band=1 then
		uer_lag_band_woe=0.103223;
	else if uer_lag_band=2 then
		uer_lag_band_woe=0.144062;
	else if uer_lag_band=3 then
		uer_lag_band_woe=0.146976;
	else
		uer_lag_band_woe=0.154988;
	logit=2.2741 +  -21.2035 * remaining_term_band_woe +  36.5747 * 
		loan_term_band_woe +  -60.7317 * ir_band_woe 
+  509.8 * hpi_lag_band_woe +  -280.9 * gdp_lag_band_woe +  -15.9987 * 
		gdp_band_woe +  -4.1325 * bureau_band_woe;
	p_hat=1 / (1 + exp(-logit));
run;

/*  The final logistic equation is log (P/1-P)=  */
/* 1.6879+income_woe*1.6038+housing_woe*2.2502+age_woe*1.0382+Occupartner_w */
/*  oe*2.3120+Occutype_woe*2.2050;  */
/* Creating data for KS and Gini   */
PROC SQL;
	create table test2 as select * from test2;
QUIT;

proc sort data=test2;
	by descending p_hat;
run;

ods html file='/home/u49308301/UDEMY/ods_test1.xls';
%let Noofrecs = &sqlobs;
%let Noofbins = 10;

data test3;
	set test2;
	retain cumm_count;
	count=1;
	cumm_count=sum(cumm_count, count);
	bin=round(cumm_count/(&Noofrecs/&Noofbins)-0.5)+1;

	if bin GT &Noofbins then
		Bin=&Noofbins;
run;

proc sql;
	create table gains_val as select bin, count(*) as freq, sum(Default_Flag) as 
		default from test3 group by bin;
	run;

proc print data=gains_val;
run;

ods html close;

/* Validation Re-run */
proc logistic data=test2;
	model default_flag=remaining_term_band_woe loan_term_band_woe ir_band_woe 
		hpi_lag_band_woe gdp_lag_band_woe gdp_band_woe bureau_band_woe;
	score out=testscore;
run;

PROC SQL;
	create table testscore as select * from testscore;
QUIT;

proc sort data=testscore;
	by descending p_1;
run;

ods html file='/home/u49308301/UDEMY/ods_testscore.xls';
%let Noofrecs = &sqlobs;
%let Noofbins = 10;

data testscore1;
	set testscore;
	retain cumm_count;
	count=1;
	cumm_count=sum(cumm_count, count);
	bin=round(cumm_count/(&Noofrecs/&Noofbins)-0.5)+1;

	if bin GT &Noofbins then
		Bin=&Noofbins;
run;

proc sql;
	create table gains_val as select bin, count(*) as freq, sum(Default_Flag) as 
		default, sum(p_1) as exp_bad_count format=comma4.2 from testscore1 group by 
		bin;
	create table gains_val as select *, (exp_bad - Default_rate)**2 as sq_dev 
		from (select *, exp_bad_count/freq as exp_bad, default/freq as Default_rate 
		from gains_val);
	run;

proc print data=gains_val;
run;

title 'Barier Score';

proc tabulate data=gains_val;
	CLASS bin;
	var sq_dev;
	TABLE sq_dev;
RUN;

title;
ods html close;

/* brier score  */